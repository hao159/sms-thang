<?php if (!defined('BASEPATH')) {
	exit('No direct script access allowed');
}

class Clone_model extends NH_Model
{

	public function __construct()
	{
		parent::__construct();
		$this->_collection = '';
	}
	public function countAllTable($clt)
	{
		if (empty($clt) or !$this->db->table_exists($clt)) {
			return 0;
		}
		$this->_collection = $clt;
		return parent::countByConditions(); // TODO: Change the autogenerated stub
	}

	public function getAllPaging2($requests, $clt)
	{
		if (empty($clt) or !$this->db->table_exists($clt)) {
			return array(
				'data' => [],
				'total' => 0
			);
		}
		$this->_collection = $clt;
		return parent::getAllPaging($requests); // TODO: Change the autogenerated stub
	}

	public function aggreate_statistic($wheres, $clt)
	{
		if ($wheres) {
			$this->db->where($wheres);
		}
		if (empty($clt) or !$this->db->table_exists($clt)) {
			return array(
				'data' => [],
				'total' => 0
			);
		}
		$this->db->select('serial, COUNT(*) as total');
		$this->db->from($clt);
		$this->db->group_by('serial');
		$this->db->order_by('total', 'DESC');
		$query = $this->db->get();
		$result = $query->result_array();
		if ($result) {
			for ($i = 0; $i < $query->num_rows(); $i++) {
				$result[$i]['mamay'] = '';
				$conditions_serial = array(
					'serial' => $result[$i]['serial']
				);
				$serial_query = $this->db->where($conditions_serial)->get('serial');
				if ($serial_query->num_rows() >0){
					$item_serial = $serial_query->result_array();
					$result[$i]['mamay'] = $item_serial[0]['mamay'] ?? '';
				}
				$this_conditions = array(
					'created_time >= ' => (time() - 5 * 60),
					'serial' => $result[$i]['serial'],
				);
				if ($wheres) {
					$wheres = array_merge($wheres, $this_conditions);
					$this->db->where($wheres);
				} else {
					$this->db->where($this_conditions);
				}

				$result[$i]['latest_5m'] = $this->db->count_all_results($clt);
				$result[$i]['count'] = $i + 1;
			}
		}
		return array(
			'data' => $result,
			'total' => $query->num_rows()
		);

	}
	public function countByConditions2($wheres = null, $clt)
	{
		if (empty($clt) or !$this->db->table_exists($clt)) {
			return false;
		}

		$this->_collection = $clt;
		return parent::countByConditions($wheres); // TODO: Change the autogenerated stub
	}

	public function addNewBatch($data, $clt)
	{
		if (empty($clt) or !$this->db->table_exists($clt)) {
			return false;
		}

		$this->_collection = $clt;
		if (empty($data) or !is_array($data)){
			return FALSE;
		}
		return $this->db->insert_batch($this->_collection, $data);
	}
	public function addNew2($data, $clt)
	{
		if (empty($clt) or !$this->db->table_exists($clt)) {
			return false;
		}

		$this->_collection = $clt;
		return parent::addNew($data); // TODO: Change the autogenerated stub
	}

	public function count_data_per_month($role, $mems, $ctl = '')
	{
		if (empty($clt) or !$this->db->table_exists($clt)) {
			return false;
		}

		$this->_collection = $clt;
		$months = 12;
		$current_month = time(); // Get current timestamp
		$start_month = strtotime('-' . $months . ' months', $current_month); // Get timestamp for 15 months ago
		$result = array();

		// Loop through each month
		while ($start_month <= $current_month) {
			$start_of_month = strtotime('first day of ' . date('F Y', $start_month)); // Get timestamp for first day of month
			$end_of_month = strtotime('last day of ' . date('F Y', $start_month)) + 86399; // Get timestamp for last day of month (add 86399 seconds for end of day)

			if ($role == 1) {
				//admin
				$total_this_count = 0;
				foreach ($mems as $mem) {
					$this->db->select('COUNT(*) as total');
					$this->db->where('created_time >=', $start_of_month);
					$this->db->where('created_time <=', $end_of_month);
					$this->db->where('mod', $mem);
					$query = $this->db->get($this->_collection);
					$this_count = intval($query->row()->total);
					$total_this_count += $this_count;
					$result['counts_' . $mem][] = $this_count;
				}
				$result['counts'][] = $total_this_count;
			} else {
				//mem
				$this->db->select('COUNT(*) as total');
				$this->db->where('created_time >=', $start_of_month);
				$this->db->where('created_time <=', $end_of_month);
				$this->db->where('mod', $mems[0]);
				$query = $this->db->get($this->_collection);
				$this_count = intval($query->row()->total);
				$result['counts'][] = $this_count;
			}

			$result['labels'][] = date('F Y', $start_month);
			$start_month = strtotime('+1 month', $start_month); // Move to next month
		}
		$result['months'] = $months;
		return $result;
	}

}

/* End of file Clone_model.php */
/* Location: ./application/models/Clone_model.php */
